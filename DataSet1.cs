//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace disabled_database_system {
    using System;
    using System.Data;
    using System.Xml;
    using System.Runtime.Serialization;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Diagnostics.DebuggerStepThrough()]
    [System.ComponentModel.ToolboxItem(true)]
    public class DataSet1 : DataSet {
        
        private 区域代码DataTable table区域代码;
        
        public DataSet1() {
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        protected DataSet1(SerializationInfo info, StreamingContext context) {
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                DataSet ds = new DataSet();
                ds.ReadXmlSchema(new XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["区域代码"] != null)) {
                    this.Tables.Add(new 区域代码DataTable(ds.Tables["区域代码"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.InitClass();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            this.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public 区域代码DataTable 区域代码 {
            get {
                return this.table区域代码;
            }
        }
        
        public override DataSet Clone() {
            DataSet1 cln = ((DataSet1)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(XmlReader reader) {
            this.Reset();
            DataSet ds = new DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["区域代码"] != null)) {
                this.Tables.Add(new 区域代码DataTable(ds.Tables["区域代码"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.table区域代码 = ((区域代码DataTable)(this.Tables["区域代码"]));
            if ((this.table区域代码 != null)) {
                this.table区域代码.InitVars();
            }
        }
        
        private void InitClass() {
            this.DataSetName = "DataSet1";
            this.Prefix = "";
            this.Namespace = "http://www.tempuri.org/DataSet1.xsd";
            this.Locale = new System.Globalization.CultureInfo("zh-CN");
            this.CaseSensitive = false;
            this.EnforceConstraints = true;
            this.table区域代码 = new 区域代码DataTable();
            this.Tables.Add(this.table区域代码);
        }
        
        private bool ShouldSerialize区域代码() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public delegate void 区域代码RowChangeEventHandler(object sender, 区域代码RowChangeEvent e);
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 区域代码DataTable : DataTable, System.Collections.IEnumerable {
            
            private DataColumn column区域;
            
            private DataColumn column代码;
            
            internal 区域代码DataTable() : 
                    base("区域代码") {
                this.InitClass();
            }
            
            internal 区域代码DataTable(DataTable table) : 
                    base(table.TableName) {
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
                this.DisplayExpression = table.DisplayExpression;
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            internal DataColumn 区域Column {
                get {
                    return this.column区域;
                }
            }
            
            internal DataColumn 代码Column {
                get {
                    return this.column代码;
                }
            }
            
            public 区域代码Row this[int index] {
                get {
                    return ((区域代码Row)(this.Rows[index]));
                }
            }
            
            public event 区域代码RowChangeEventHandler 区域代码RowChanged;
            
            public event 区域代码RowChangeEventHandler 区域代码RowChanging;
            
            public event 区域代码RowChangeEventHandler 区域代码RowDeleted;
            
            public event 区域代码RowChangeEventHandler 区域代码RowDeleting;
            
            public void Add区域代码Row(区域代码Row row) {
                this.Rows.Add(row);
            }
            
            public 区域代码Row Add区域代码Row(string 区域, string 代码) {
                区域代码Row row区域代码Row = ((区域代码Row)(this.NewRow()));
                row区域代码Row.ItemArray = new object[] {
                        区域,
                        代码};
                this.Rows.Add(row区域代码Row);
                return row区域代码Row;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override DataTable Clone() {
                区域代码DataTable cln = ((区域代码DataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override DataTable CreateInstance() {
                return new 区域代码DataTable();
            }
            
            internal void InitVars() {
                this.column区域 = this.Columns["区域"];
                this.column代码 = this.Columns["代码"];
            }
            
            private void InitClass() {
                this.column区域 = new DataColumn("区域", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column区域);
                this.column代码 = new DataColumn("代码", typeof(string), null, System.Data.MappingType.Element);
                this.Columns.Add(this.column代码);
            }
            
            public 区域代码Row New区域代码Row() {
                return ((区域代码Row)(this.NewRow()));
            }
            
            protected override DataRow NewRowFromBuilder(DataRowBuilder builder) {
                return new 区域代码Row(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(区域代码Row);
            }
            
            protected override void OnRowChanged(DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.区域代码RowChanged != null)) {
                    this.区域代码RowChanged(this, new 区域代码RowChangeEvent(((区域代码Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.区域代码RowChanging != null)) {
                    this.区域代码RowChanging(this, new 区域代码RowChangeEvent(((区域代码Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.区域代码RowDeleted != null)) {
                    this.区域代码RowDeleted(this, new 区域代码RowChangeEvent(((区域代码Row)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.区域代码RowDeleting != null)) {
                    this.区域代码RowDeleting(this, new 区域代码RowChangeEvent(((区域代码Row)(e.Row)), e.Action));
                }
            }
            
            public void Remove区域代码Row(区域代码Row row) {
                this.Rows.Remove(row);
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 区域代码Row : DataRow {
            
            private 区域代码DataTable table区域代码;
            
            internal 区域代码Row(DataRowBuilder rb) : 
                    base(rb) {
                this.table区域代码 = ((区域代码DataTable)(this.Table));
            }
            
            public string 区域 {
                get {
                    try {
                        return ((string)(this[this.table区域代码.区域Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table区域代码.区域Column] = value;
                }
            }
            
            public string 代码 {
                get {
                    try {
                        return ((string)(this[this.table区域代码.代码Column]));
                    }
                    catch (InvalidCastException e) {
                        throw new StrongTypingException("无法获取值，因为它是 DBNull。", e);
                    }
                }
                set {
                    this[this.table区域代码.代码Column] = value;
                }
            }
            
            public bool Is区域Null() {
                return this.IsNull(this.table区域代码.区域Column);
            }
            
            public void Set区域Null() {
                this[this.table区域代码.区域Column] = System.Convert.DBNull;
            }
            
            public bool Is代码Null() {
                return this.IsNull(this.table区域代码.代码Column);
            }
            
            public void Set代码Null() {
                this[this.table区域代码.代码Column] = System.Convert.DBNull;
            }
        }
        
        [System.Diagnostics.DebuggerStepThrough()]
        public class 区域代码RowChangeEvent : EventArgs {
            
            private 区域代码Row eventRow;
            
            private DataRowAction eventAction;
            
            public 区域代码RowChangeEvent(区域代码Row row, DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public 区域代码Row Row {
                get {
                    return this.eventRow;
                }
            }
            
            public DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
